cable setup:
J1/B == buttons
J3/C == LEDs

getting the debugger to work:
avr32gdbroxy //proxy thing for the debugger or what
default port is 4711
avr32-gdb //start the debugger

Got the paddle to work when pushing button 0 and 2.
The paddle loops back to the end when pushed off the edge (button 0 pushed when LED 0 is lit, or when btn 2 is pushed when LED 7 is lit).

At some point we found out about store word with displacement (st.w rd[disp], rs), allowing us to reduce the number of lines of code for the initializing of the board.

Initialization v01
lddpc r0, per_pioc_peker
and so on, loading pointers to the memory addresses of [all the things we have to initialize] into various registers.
Pointers were made in the following manner:
oer_pioc_peker:
	.int AVR32_PIOC|AVR32_PIO_OER

initialization v02
lddpc r0, pioc_offset ; load start address of PIOC into r0
lddpc r2, piob_offset ; load start address of PIOB into r2
st.w r0[AVR32_PIO_OER]
st.w rd[disp], rs
stores the value of rs to the memory address pointed to by rd+the displacement of disp



to enable interrupts:
register PIOB IER (set corresponding bits)
to disable:
register PIOB IDR (set corresponding bits)
determine and set EVBA

st.w r2[AVR32_PIO_IER], r6 ; r6 holds x05 (to enable interrupts for btn 0 and 2)
mtsr 4, r1 ; 0 is commonly stored in r1 (we are storing 0 in r1)
;"calculate autovector and write to INTC the registry in IPR14"
; wat.
	"An interrupt controller generating different offsets depending on interrupt request source is referred to as autovectoring."
		AVR32 Architecture Document pg 67

lddpc r8, button_interrupt_routine
st.w r7[AVR32_INTC_IPR14], r8 ; writes the address of the interrupt routine (b_i_r) to IPR register #14



button_interrupt_routine: ; button interrupt routine
	rcall read_buttons
	ld.w r8, r2[AVR32_PIO_ISR] ; reading from PIO_ISR in order to enable further interrupts

//what happens to r12 when we enter/leave an interrupt routine?
//the microarchitecture is AVR32A

//we are unsure why it isn't working but it might have something
//we think it might be because we did not follow the instructions all the way through
//yeah we forgot about csrf 16
added csrf 16 to last line of init
and that worked.

tried sleep 5
whoops, looks like we broke it per the warning on http://www.idi.ntnu.no/emner/tdt4258/exercises

sleep 1 seems safe
sleep 2 renders the board unresponsive to the buttans

implementing debouncing per the example in Figure 2.9 (page 23) in the compendium
we load some high number into a register and loop until the register's is 0
at which point the debouncing loop returns

//board name is AT32AP7000
puer = pull up resistors enable registers

we rewrote the code to use the following 'convention' for the register's contents
conventions sigve found in a pdf:
r0 = texas
r1 = 0x00
r2 = piob_offset 
r3 = pioc_offset
r4 = paddle
r5 = 0x05 
r6 = 0xff (this is used like four times)
r7 = previous button state
r8 =
r9 =
r10=
r11=
r12= return address

rewrite of code also had us writing major comments, yo

without debouncing, pressing SW_0 caused so many interrupts that the board decides to reset the program.

post-debouncing we are still left with the issue of each push of the buttans registering as two
fixing the two registered presses per press problem:
fix 1) assume each button push registers two (one when it goes down, one when it goes up)
    this does not seem to work properly (it works fine for SW_0, but has us pressing SW_2 twice for the paddle to move), probably due to the switches being worn.
fix 1-2) tweak debouncing (set to 0xfff) with fix1, and it works. further experimentation lead us to believe that 0xfff is a "pretty optimal" debouncing time
